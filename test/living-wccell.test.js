import { html, fixture, expect } from '@open-wc/testing';
import sinon from 'sinon';

import '../living-wccell.js';

// Generated by CodiumAI

describe('LivingWccell', () => {

  // Tests that the LivingWccell class initializes with default values
  it('should initialize with default values', async () => {
      const cell = await fixture(html`<living-wccell></living-wccell>`);
      expect(cell.position).to.be.an('object');
      expect(cell.diameter).to.be.a('string');
      expect(cell.type).to.be.a('number');
      expect(cell.cycle).to.be.an('object');
      expect(cell.age).to.be.a('number');
      expect(cell.memory).to.be.an('array');
  });

  // Tests that the LivingWccell grows in size every second
  it('should grow in size every second', async () => {
      const clock = sinon.useFakeTimers();
      const cell = await fixture(html`<living-wccell></living-wccell>`);
      const initialDiameter = cell.diameter;
      clock.tick(1000);
      expect(cell.diameter).to.equal(`${parseInt(initialDiameter, 10) + 5}px`);
      clock.restore();
  });

  // Tests that the LivingWccell moves randomly every 300ms
  it('should move randomly every 300ms', async () => {
      const clock = sinon.useFakeTimers();
      const cell = await fixture(html`<living-wccell></living-wccell>`);
      const initialPosition = { ...cell.position };
      clock.tick(300);
      expect(cell.position).to.not.deep.equal(initialPosition);
      clock.restore();
  });

  // Tests that the LivingWccell dispatches a 'living-wccell-move' event on move
  it('should dispatch a living-wccell-move event on move', async () => {
      const cell = await fixture(html`<living-wccell></living-wccell>`);
      const moveSpy = sinon.spy();
      document.addEventListener('living-wccell-move', moveSpy);
      cell.move();
      expect(moveSpy.calledOnceWithExactly(sinon.match({ detail: { id: cell.id, position: cell.position, diameter: cell.diameter, age: cell.age } }))).to.be.true;
      document.removeEventListener('living-wccell-move', moveSpy);
  });
});
